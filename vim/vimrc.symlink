"===============================================================================
"" Setup
"===============================================================================

" be IMproved
set nocompatible

" 'required' ???
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" load all vundle plugins
source $HOME/.vim/packages.vim

" make stuff pretty
syntax on

" Be a cool guy
scriptencoding utf-8
set encoding=utf-8

" better nerdtree splits
set splitbelow
set splitright

" indent git commits
filetype plugin indent on

" Update how vim looks
set background=dark
colorscheme Tomorrow-Night-Eighties

" show the cursor position all the time
set ruler

" show line numbers
set number

" draw a line on the same as the cursor position
set cursorline

" enable mouse support
set mouse=a

" display incomplete commands
set showcmd

" set the screen title to the currently opened file
set title

" stop blinking cursors
set gcr=n:blinkon0

" for powerline visiblity
set laststatus=1
set cmdheight=2

" Allow backgrounding buffers without writing them, and remember marks/undo
" for backgrounded buffers
set hidden
" Save undo's after file closes
set undofile                    
" where to save undo histories
set undodir=~/.vim/undo

" Turn backup off, since most stuff is in SVN, git anyway...
set nobackup
set nowb
set noswapfile

" Don't wrap lines, ew
set nowrap

" A tab is 2 spaces
set tabstop=2
set shiftwidth=2

" use spaces, not tabs
set noexpandtab

" Display unprintable chars
set list
set listchars=tab:→\ ,extends:❯,precedes:❮,nbsp:␣
set showbreak=↪

" listchar=trail is not as flexible, use the below to highlight trailing
" whitespace. Don't do it for unite windows or readonly files
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
augroup MyAutoCmd
	autocmd BufWinEnter * if &modifiable && &ft!='unite' | match ExtraWhitespace /\s\+$/ | endif
	autocmd InsertEnter * if &modifiable && &ft!='unite' | match ExtraWhitespace /\s\+\%#\@<!$/ | endif
	autocmd InsertLeave * if &modifiable && &ft!='unite' | match ExtraWhitespace /\s\+$/ | endif
	autocmd BufWinLeave * if &modifiable && &ft!='unite' | call clearmatches() | endif
augroup END

" Allow backspacing while in insert
set backspace=indent,eol,start


" Improve searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Highlight line 80
set cc=80 

" Command line completion
set wildmenu
set wildmode=list:longest,full

" provide some context when editing
set scrolloff=3


" Leader Mappings
let mapleader=";"
let maplocalleader=";"

" clear the search buffer when hitting ;return
map <silent> <leader><cr> :noh<cr> 

" Map space to / (search) and c-space to ? (backgwards search)
" map <space> /
" map <c-space> ?

" toggle last buffer
nnoremap <leader><leader> <c-^>

" goto previous buffer, then delete previous buffer (close buffer, keep split)
nmap <leader>d :b#<bar>bd#<CR>

" easier navigation between split windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" NERDTree
nnoremap <leader>n :NERDTreeToggle<CR>
" quit NERDTree after opening a file
let g:NERDTreeQuitOnOpen = 0

" Map easy autoclose toggle
nmap <unique> <Leader>ac <Plug>ToggleAutoCloseMappings

" I'm getting tired of accidentally holding down the shift key...
" Reissue `w` even if I capitalize it...
com W w
com Q q

" CtrlP
let g:ctrlp_extensions = ['tag']
let g:ctrlp_match_window_bottom = 1
let g:ctrlp_match_window_reversed = 1
" let g:ctrlp_working_path_mode = 'rw'
let g:ctrlp_dotfiles = 0 "so ctrlp won't search dotfiles/dotdirs
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_map = '<leader>f'
let g:ctrlp_custom_ignore = 'build'
let g:ctrlp_follow_symlinks = 1

" Add powerline symbol fonts to airline
let g:airline_powerline_fonts = 1

" Sets how many lines of history vim has to remember
set history=10000

" Set to auto read when a file is changed from the outside
set autoread

" Cursor settings. This makes terminal vim sooo much nicer!
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif




"===============================================================================
"" Normal Mode Shift Key Mappings
"===============================================================================

" U: Redos since 'u' undos
nnoremap U :redo<cr>

" H: Go to beginning of line.
noremap H ^

" L: Go to end of line.
noremap L g_



"===============================================================================
"" Function Key Mappings
"===============================================================================

" <F1>: Help
nmap <F1> [unite]h

" <F4>: Save session
nnoremap <F4> :<C-u>UniteSessionSave



"===============================================================================
"" Normal Mode Ctrl Key Mappings
"===============================================================================

" Ctrl-u/d: Scroll half a screen smoothly
" noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 5, 1)<CR>
" noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 5, 1)<CR>

"" I think I want these as leader key functions
" Ctrl-e: Find (e)verything
nmap <c-e> [unite]f

" Ctrl-r: Command history using Unite, this matches my muscle memory in zsh
nmap <c-r> [unite];

" Ctrl-y: Yanks
nmap <c-y> [unite]y

" Ctrl-p: Find MRU and buffers
nmap <c-p> [unite]u

" Ctrl-\: Quick outline
nmap <silent> <c-\> [unite]o

" Ctrl-/: A more powerful '/'
nmap <c-_> [unite]l



"===============================================================================
"" Insert Mode Ctrl Key Mappings
"===============================================================================

" Ctrl-e: Go to end of line
inoremap <c-e> <esc>A

" Ctrl-a: Go to begin of line
inoremap <c-a> <esc>I



"===============================================================================
"" Syntastic
"===============================================================================

let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['scss'] }
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_auto_loc_list=1



"===============================================================================
"" Arpeggio
"===============================================================================

" map jk to escape (mashing ftw)
call arpeggio#map('i', '', 0, 'jk', '<Esc>') " jk | esc



"===============================================================================
"" EasyMotion
"===============================================================================

" Tweak the colors
" hi link EasyMotionTarget WarningMsg
" hi link EasyMotionShade  Comment

" let g:EasyMotion_do_mapping = 0
" nnoremap <silent> <C-f> :call EasyMotion
" nnoremap <silent> <C-t> :call EasyMotion




"===============================================================================
" Unite Setup
"===============================================================================

" <F1>: Help
" <F4>: Save session

" Ctrl-e: Find (e)verything
" Ctrl-r: Command history using Unite, this matches my muscle memory in zsh
" Ctrl-y: Yanks
" Ctrl-p: Find MRU and buffers
" Ctrl-\: Quick outline
" Ctrl-/: A more powerful '/'

" Use the fuzzy matcher for everything
call unite#filters#matcher_default#use(['matcher_fuzzy'])

" Use the rank sorter for everything
call unite#filters#sorter_default#use(['sorter_rank'])

" Set up some custom ignores
call unite#custom_source('file_rec,file_rec/async,file_mru,file,buffer,grep',
      \ 'ignore_pattern', join([
      \ '\.git/',
      \ 'git5/.*/review/',
      \ 'google/obj/',
      \ 'tmp/',
      \ '.sass-cache',
      \ ], '\|'))

" Map space to the prefix for Unite
nnoremap [unite] <Nop>
nmap <space> [unite]

" General fuzzy search, seems useless?
" nnoremap <silent> [unite]<space> :<C-u>Unite
"       \ -buffer-name=files buffer file_mru bookmark file_rec/async<CR>

" Quick registers
" Buggy when i tried it
" nnoremap <silent> [unite]r :<C-u>Unite -buffer-name=register register<CR>

" Quick buffer and mru, for recent stuff
nnoremap <silent> [unite]u :<C-u>Unite -buffer-name=buffers buffer file_mru<CR>

" Quick yank history
nnoremap <silent> [unite]y :<C-u>Unite -buffer-name=yanks history/yank<CR>

" Quick outline, see an overview of this file
nnoremap <silent> [unite]o :<C-u>Unite -buffer-name=outline -vertical outline<CR>

" Quick sessions (projects), ???
" nnoremap <silent> [unite]p :<C-u>Unite -buffer-name=sessions session<CR>

" Quick sources
nnoremap <silent> [unite]a :<C-u>Unite -buffer-name=sources source<CR>

" Quick snippet, failed
" nnoremap <silent> [unite]s :<C-u>Unite -buffer-name=snippets snippet<CR>

" Quickly switch lcd
nnoremap <silent> [unite]d
      \ :<C-u>Unite -buffer-name=change-cwd -default-action=lcd directory_mru<CR>

" Quick file search
nnoremap <silent> [unite]f :<C-u>Unite -buffer-name=files file_rec/async file/new<CR>

" Quick grep from cwd, super useful 'find code in this project'
nnoremap <silent> [unite]g :<C-u>Unite -buffer-name=grep grep:.<CR>

" Quick help
nnoremap <silent> [unite]h :<C-u>Unite -buffer-name=help help<CR>

" Quick find using the word under cursor
nnoremap <silent> [unite]l :<C-u>UniteWithCursorWord -buffer-name=search_file line<CR>

" Quick MRU search, this is wicked useful
nnoremap <silent> [unite]m :<C-u>Unite -buffer-name=mru file_mru<CR>

" Quick find, seemingly finds nothing?
" nnoremap <silent> [unite]n :<C-u>Unite -buffer-name=find find:.<CR>

" Quick commands, lists all available vim commands
nnoremap <silent> [unite]c :<C-u>Unite -buffer-name=commands command<CR>

" Quick bookmarks
nnoremap <silent> [unite]b :<C-u>Unite -buffer-name=bookmarks bookmark<CR>

" Custom Unite settings
autocmd MyAutoCmd FileType unite call s:unite_settings()
function! s:unite_settings()

  nmap <buffer> <ESC> <Plug>(unite_exit)
  imap <buffer> <ESC> <Plug>(unite_exit)
  " imap <buffer> <c-j> <Plug>(unite_select_next_line)
  imap <buffer> <c-j> <Plug>(unite_insert_leave)
  nmap <buffer> <c-j> <Plug>(unite_loop_cursor_down)
  nmap <buffer> <c-k> <Plug>(unite_loop_cursor_up)
  imap <buffer> <c-a> <Plug>(unite_choose_action)
  " imap <buffer> <Tab> <Plug>(unite_exit_insert)
  imap <buffer> jj <Plug>(unite_insert_leave)
  imap <buffer> <C-w> <Plug>(unite_delete_backward_word)
  imap <buffer> <C-u> <Plug>(unite_delete_backward_path)
  imap <buffer> '     <Plug>(unite_quick_match_default_action)
  nmap <buffer> '     <Plug>(unite_quick_match_default_action)
  nmap <buffer> <C-r> <Plug>(unite_redraw)
  imap <buffer> <C-r> <Plug>(unite_redraw)
  inoremap <silent><buffer><expr> <C-s> unite#do_action('split')
  nnoremap <silent><buffer><expr> <C-s> unite#do_action('split')
  inoremap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
  nnoremap <silent><buffer><expr> <C-v> unite#do_action('vsplit')

  let unite = unite#get_current_unite()
  if unite.buffer_name =~# '^search'
    nnoremap <silent><buffer><expr> r     unite#do_action('replace')
  else
    nnoremap <silent><buffer><expr> r     unite#do_action('rename')
  endif

  nnoremap <silent><buffer><expr> cd     unite#do_action('lcd')

  " Using Ctrl-\ to trigger outline, so close it using the same keystroke
  if unite.buffer_name =~# '^outline'
    imap <buffer> <C-\> <Plug>(unite_exit)
  endif

  " Using Ctrl-/ to trigger line, close it using same keystroke
  if unite.buffer_name =~# '^search_file'
    imap <buffer> <C-_> <Plug>(unite_exit)
  endif
endfunction

" Start in insert mode
let g:unite_enable_start_insert = 1

" Enable history yank source
let g:unite_source_history_yank_enable = 1

" Open in bottom right
let g:unite_split_rule = "botright"

" Shorten the default update date of 500ms
let g:unite_update_time = 200

let g:unite_source_file_mru_limit = 1000
let g:unite_cursor_line_highlight = 'TabLineSel'
" let g:unite_abbr_highlight = 'TabLine'

let g:unite_source_file_mru_filename_format = ':~:.'
let g:unite_source_file_mru_time_format = ''
